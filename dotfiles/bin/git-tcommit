#!/usr/bin/env bash
set -e

# `git commit`, using the latest file modification time as the commit and author
# dates, when GIT_AUTHOR_DATE or GIT_COMMITTER_DATE, respectively, is not set.

if which gstat > /dev/null; then
  stat=(gstat --format='%.Y %n') # Detected aliased GNU coreutils
elif stat --version 2> /dev/null | grep -q 'GNU coreutils'; then
  stat=(stat --format='%.Y %n') # Detected GNU coreutils
else
  stat=(stat -f '%m %N') # Fallback to BSD-style, which only reports seconds
fi

# Select the latest modified time of all staged files, excluding deletions.
latest="$(git diff --staged --diff-filter=d --name-only -z |
  xargs -0 "${stat[@]}" |
  sort -rn |
  head -1)"

if [[ -n $latest ]]; then
  latest_seconds="${latest%% *}"
  latest_file="${latest#* }"
  latest_date="$(date -r "${latest_seconds%.*}" +'%Y-%m-%d %H:%M:%S %z')"
  echo "Modify date: $latest_date ($latest_file)"
fi
if [[ -n ${GIT_AUTHOR_DATE+.} ]]; then
  echo "Author date: ${GIT_AUTHOR_DATE:-now}"
fi
if [[ -n ${GIT_COMMITTER_DATE+.} ]]; then
  echo "Commit date: ${GIT_COMMITTER_DATE:-now}"
fi

GIT_AUTHOR_DATE="${GIT_AUTHOR_DATE-"$latest_seconds"}" \
GIT_COMMITTER_DATE="${GIT_COMMITTER_DATE-"$latest_seconds"}" \
git commit "$@"
